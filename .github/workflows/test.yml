name: RW PostViewStats Lite Codeception Tests

on:
  push:
    branches: [ ci ]
  pull_request:
    branches: [ ci ]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      WP_ADMIN_USER: ${{ secrets.WP_ADMIN_USER }}
      WP_ADMIN_PASS: ${{ secrets.WP_ADMIN_PASS }}
      WP_PORT: 8080
      MYSQL_DATABASE: test_db
      MYSQL_ROOT_PASSWORD: root

    steps:
      # ---------- Checkout 代码 ----------
      - name: 1. Checkout code
        uses: actions/checkout@v3

      # ---------- 创建 Docker 网络 ----------
      - name: 2. Create Docker network
        run: docker network create wp-net || true

      # ---------- 启动 Selenium 容器（1）----------
      - name: 3. Start Selenium container
        run: |
          docker run -d --name selenium --network wp-net \
            -p 4444:4444 \
            selenium/standalone-chrome:120.0

          # 等待 Selenium 启动
          echo "Waiting for Selenium to start..."
          sleep 5

      # ---------- 启动 MySQL 容器（2）  ----------
      - name: 4. Start MySQL container
        run: |
          docker run -d --name mysql --network wp-net \
            -e MYSQL_DATABASE=$MYSQL_DATABASE \
            -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD \
            mysql:8.0

      # ---------- 等待 MySQL 启动----------
      - name: 5. Wait for MySQL
        run: |
          echo "Waiting for MySQL..."
          for i in {1..30}; do
            docker exec mysql mysqladmin ping -uroot -p$MYSQL_ROOT_PASSWORD --silent && break
            sleep 2
          done

      # ---------- 编译 自定义 WP-FPM 镜像 (包含 pdo_mysql) ----------
      - name: 6. Build custom wp-fpm image (with pdo_mysql)
        run: |
          mkdir -p $GITHUB_WORKSPACE/ci
          cat > $GITHUB_WORKSPACE/ci/Dockerfile <<'EOF'
          FROM wordpress:6.8-php8.2-fpm

          # 安装编译所需的依赖并启用 pdo_mysql, pdo, mysqli 等扩展
          RUN set -eux; \
              apt-get update; \
              apt-get install -y --no-install-recommends \
                default-mysql-client \
                libzip-dev \
                zlib1g-dev \
                libpng-dev \
                libjpeg-dev \
                libfreetype6-dev \
                libxml2-dev \
                git \
                unzip; \
              docker-php-ext-configure gd --with-jpeg --with-freetype; \
              docker-php-ext-install -j"$(nproc)" pdo pdo_mysql mysqli gd; \
              rm -rf /var/lib/apt/lists/*

          # 安装 Composer
          RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

          EOF

          docker build -t wp-fpm-custom -f $GITHUB_WORKSPACE/ci/Dockerfile $GITHUB_WORKSPACE

      # ---------- 准备插件目录 ----------
      - name: 7. Prepare plugins directory
        run: |
          mkdir -p $GITHUB_WORKSPACE/wp-plugin-temp
          shopt -s extglob
          cp -r $GITHUB_WORKSPACE/!(wp-plugin-temp) $GITHUB_WORKSPACE/wp-plugin-temp/
          shopt -u extglob

      # ---------- 安装 Composer 依赖 ----------
      - name: 8. Install Composer dependencies
        run: |
          cd $GITHUB_WORKSPACE/wp-plugin-temp/
          composer install --no-interaction --prefer-dist --optimize-autoloader

      # ---------- 初始化 wp-data volume 并拷贝 WordPress core + 插件 ----------
      - name: 9. Init wp-data volume with WordPress core and plugin
        run: |
          # 创建 volume
          docker volume create wp-data

          # 先把 WordPress core 拷贝到 volume
          docker run --rm -v wp-data:/var/www/html wordpress:6.8-php8.2-fpm \
           bash -c "cp -R /usr/src/wordpress/* /var/www/html/"

          # 再把插件（包含 vendor）拷贝到 volume
          docker run --rm -v wp-data:/var/www/html -v $GITHUB_WORKSPACE/wp-plugin-temp:/tmp/plugin \
           bash -c "mkdir -p /var/www/html/wp-content/plugins/ && cp -R /tmp/plugin /var/www/html/wp-content/plugins/rw-postviewstats-lite"

      # ---------- 启动 WordPress PHP-FPM 容器（3） （挂载插件）----------
      - name: 10. Start WordPress PHP-FPM container
        run: |
          docker run -d --name wordpress-fpm --network wp-net \
          -v wp-data:/var/www/html \
          wp-fpm-custom

      # ---------- 启动 wordpress-nginx 容器（4） ----------
      - name: 11. Start Nginx container
        run: |
          mkdir -p $GITHUB_WORKSPACE/nginx
          echo '
          server {
              listen 80;
              server_name _;

              root /var/www/html;
              index index.php index.html;

              location / {
                  try_files $uri $uri/ /index.php?$args;
              }

              location ~ \.php(?:$|/) {
                fastcgi_pass wordpress-fpm:9000;
                fastcgi_index index.php;
                include fastcgi_params;
                
                fastcgi_split_path_info ^(.+?\.php)(/.*)$;
                
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_param PATH_INFO $fastcgi_path_info;
                fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
            }
          
          }
          ' > $GITHUB_WORKSPACE/nginx/default.conf

          docker run -d --name wordpress-nginx --network wp-net \
            -p $WP_PORT:80 \
            -v wp-data:/var/www/html \
            -v $GITHUB_WORKSPACE/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro \
            nginx:stable-alpine

          # 等待 Nginx 启动
          echo "Waiting for Nginx to start..."
          sleep 5

      # ---------- 安装 WP-CLI ----------
      - name: 12. Install WP-CLI in PHP-FPM container
        run: |
          docker exec wordpress-fpm bash -c "curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && \
          chmod +x wp-cli.phar && mv wp-cli.phar /usr/local/bin/wp && wp --info"

      # ---------- 下载 WordPress 核心 ----------
      - name: 13. Download WordPress core
        run: |
          docker exec wordpress-fpm php -d memory_limit=512M /usr/local/bin/wp core download --allow-root --force --path=/var/www/html

      # ---------- 创建 wp-config.php ----------
      - name: 14. Create wp-config.php
        run: |
          docker exec wordpress-fpm php -d memory_limit=512M /usr/local/bin/wp config create \
            --dbhost=mysql:3306 \
            --dbname=$MYSQL_DATABASE \
            --dbuser=root \
            --dbpass=$MYSQL_ROOT_PASSWORD \
            --skip-check \
            --allow-root \
            --path=/var/www/html

      # ---------- 安装 WordPress & 激活插件 ----------
      - name: 15. Install WordPress & Activate Plugin
        run: |
          docker exec wordpress-fpm php -d memory_limit=512M /usr/local/bin/wp core install \
            --url="http://localhost:8080/" \
            --title="Test Site" \
            --admin_user="$WP_ADMIN_USER" \
            --admin_password="$WP_ADMIN_PASS" \
            --admin_email="robert2021south@gmail.com" \
            --skip-email \
            --allow-root \
            --path=/var/www/html

          docker exec wordpress-fpm php -d memory_limit=512M /usr/local/bin/wp plugin activate rw-postviewstats-lite \
            --allow-root \
            --path=/var/www/html

      # ---------- 运行 Unit 测试 ----------
      - name: 16. Run Unit Tests
        run: |
          docker exec wordpress-fpm bash -c "cd /var/www/html/wp-content/plugins/rw-postviewstats-lite && ./vendor/bin/codecept run Unit"

      # ---------- 运行 Integration 测试 ----------
      - name: 17. Run Integration Tests
        run: |
          docker exec wordpress-fpm bash -c "cd /var/www/html/wp-content/plugins/rw-postviewstats-lite && ./vendor/bin/codecept run Integration"

      # ---------- 运行 Acceptance 测试 ----------
      - name: Check curl wordpress-nginx login.php
        run: |
          echo "-----------------------------------------------------------------------"
          docker exec wordpress-nginx sh -c "curl -s http://wordpress-nginx/"
          echo "-----------------------------------------------------------------------"
          docker exec wordpress-nginx sh -c "curl -s http://wordpress-nginx/wp-admin/"
          echo "-----------------------------------------------------------------------"
          docker exec wordpress-nginx sh -c "curl -s http://wordpress-nginx/wp-login.php"

      - name: 18. Run Acceptance Tests
        run: |
          docker exec wordpress-fpm bash -c "cd /var/www/html/wp-content/plugins/rw-postviewstats-lite && \
            TEST_SELENIUM_HOST=selenium TEST_SELENIUM_PORT=4444 ./vendor/bin/codecept run Acceptance --filter cleanPosts CleanerCest.php --debug"

