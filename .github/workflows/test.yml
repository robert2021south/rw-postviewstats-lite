name: RW PostViewStats Lite Codeception Tests

on:
  push:
    branches: [ ci ]
  pull_request:
    branches: [ ci ]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      WP_ADMIN_USER: ${{ secrets.WP_ADMIN_USER }}
      WP_ADMIN_PASS: ${{ secrets.WP_ADMIN_PASS }}
      WP_PORT: 8080
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: test_db

    steps:
      # ---------- 1. Checkout 代码 ----------
      - name: Checkout code
        uses: actions/checkout@v3

      # ---------- 2. 创建 Docker 网络 ----------
      - name: Create Docker network
        run: docker network create wp-net || true

      # ---------- 3. Build custom WP-FPM image (包含 pdo_mysql) ----------
      - name: Build custom wp-fpm image (with pdo_mysql)
        run: |
          mkdir -p $GITHUB_WORKSPACE/ci
          cat > $GITHUB_WORKSPACE/ci/Dockerfile <<'EOF'
          FROM wordpress:6.8-php8.2-fpm

          # 安装编译所需的依赖并启用 pdo_mysql, pdo, mysqli 等扩展
          RUN set -eux; \
              apt-get update; \
              apt-get install -y --no-install-recommends \
                default-mysql-client \
                libzip-dev \
                zlib1g-dev \
                libpng-dev \
                libjpeg-dev \
                libfreetype6-dev \
                libxml2-dev \
                git \
                unzip; \
              docker-php-ext-configure gd --with-jpeg --with-freetype; \
              docker-php-ext-install -j"$(nproc)" pdo pdo_mysql mysqli gd; \
              rm -rf /var/lib/apt/lists/*

          # 安装 Composer
          RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

          EOF

          docker build -t wp-fpm-custom -f $GITHUB_WORKSPACE/ci/Dockerfile $GITHUB_WORKSPACE

      # ---------- 4. 启动 MySQL ----------
      - name: Start MySQL container
        run: |
          docker run -d --name mysql --network wp-net \
            -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD \
            -e MYSQL_DATABASE=$MYSQL_DATABASE \
            mysql:8.0

      # 等待 MySQL 启动
      - name: Wait for MySQL
        run: |
          echo "Waiting for MySQL..."
          for i in {1..30}; do
            docker exec mysql mysqladmin ping -uroot -p$MYSQL_ROOT_PASSWORD --silent && break
            sleep 2
          done

      # ---------- 5. 准备插件目录 ----------
      - name: Prepare plugins directory
        run: |
          mkdir -p $GITHUB_WORKSPACE/wp-plugin-temp
          shopt -s extglob
          cp -r $GITHUB_WORKSPACE/!(wp-plugin-temp) $GITHUB_WORKSPACE/wp-plugin-temp/
          shopt -u extglob

      # ---------- 6. 启动 WordPress PHP-FPM （挂载插件）----------
      - name: Start WordPress PHP-FPM container
        run: |
          docker run -d --name wordpress-fpm --network wp-net \
          -v $GITHUB_WORKSPACE/wp-plugin-temp:/var/www/html/wp-content/plugins/rw-postviewstats-lite \
          wp-fpm-custom

      # ---------- 7. 启动 Nginx ----------
      - name: Start Nginx container
        run: |
          mkdir -p $GITHUB_WORKSPACE/nginx
          echo '
          server {
              listen 80;
              server_name localhost;

              root /var/www/html;
              index index.php index.html;

              location / {
                  try_files $uri $uri/ /index.php?$args;
              }

              location ~ \.php$ {
                  fastcgi_pass wordpress-fpm:9000;
                  fastcgi_index index.php;
                  include fastcgi_params;
                  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              }
          }
          ' > $GITHUB_WORKSPACE/nginx/default.conf

          docker run -d --name wordpress-nginx --network wp-net \
            -p $WP_PORT:80 \
            -v ${{ github.workspace }}/wp-plugin-temp/assets:/var/www/html/wp-content/plugins/rw-postviewstats-lite/assets:ro \
            -v ${{ github.workspace }}/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro \
            nginx:stable-alpine

      # 等待 Nginx 启动
      - name: Wait for Nginx
        run: sleep 5

      # ---------- 8. 安装 Composer 依赖 ----------
      - name: Install Composer dependencies inside container
        run: |
          docker exec wordpress-fpm bash -c "cd /var/www/html/wp-content/plugins/rw-postviewstats-lite && composer install --no-interaction --prefer-dist --optimize-autoloader"

      # ---------- 9. 启动 Selenium ----------
      - name: Start Selenium container
        run: |
          docker run -d --name selenium --network wp-net \
            -p 4444:4444 \
            selenium/standalone-chrome:120.0

      - name: Wait for Selenium
        run: sleep 5

      # ---------- 10. 安装 WP-CLI ----------
      - name: Install WP-CLI in PHP-FPM container
        run: |
          docker exec wordpress-fpm bash -c "curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && \
          chmod +x wp-cli.phar && mv wp-cli.phar /usr/local/bin/wp && wp --info"

      # ---------- 11. 下载 WordPress 核心 ----------
      - name: Download WordPress core
        run: |
          docker exec wordpress-fpm php -d memory_limit=512M /usr/local/bin/wp core download --allow-root --force --path=/var/www/html

      # ---------- 12. 创建 wp-config.php ----------
      - name: Create wp-config.php
        run: |
          docker exec wordpress-fpm php -d memory_limit=512M /usr/local/bin/wp config create \
            --dbname=$MYSQL_DATABASE \
            --dbuser=root \
            --dbpass=$MYSQL_ROOT_PASSWORD \
            --dbhost=mysql:3306 \
            --skip-check \
            --allow-root \
            --path=/var/www/html

      # ---------- 13. 安装 WordPress & 激活插件 ----------
      - name: Install WordPress & Activate Plugin
        run: |
          docker exec wordpress-fpm php -d memory_limit=512M /usr/local/bin/wp core install \
            --url="http://wordpress-nginx:80" \
            --title="Test Site" \
            --admin_user="$WP_ADMIN_USER" \
            --admin_password="$WP_ADMIN_PASS" \
            --admin_email="test@example.com" \
            --skip-email \
            --allow-root \
            --path=/var/www/html

          docker exec wordpress-fpm php -d memory_limit=512M /usr/local/bin/wp plugin activate rw-postviewstats-lite \
            --allow-root \
            --path=/var/www/html

      # ---------- 14. 运行 Unit 测试 ----------
      - name: Run Unit Tests
        run: |
          docker exec wordpress-fpm bash -c "cd /var/www/html/wp-content/plugins/rw-postviewstats-lite && ./vendor/bin/codecept run Unit"

      # ---------- 15. 运行 Integration 测试 ----------
      - name: Debug wordpress-nginx
        run: |
          docker exec wordpress-fpm bash -c "
            php -r 'new PDO(\"mysql:host=mysql;port=3306;dbname=test_db\",\"root\",\"root\"); echo \"DB OK\n\";'
            curl -s http://wordpress-nginx/
          "

      - name: Run Integration Tests
        run: |
          docker exec wordpress-fpm bash -c "
            cd /var/www/html/wp-content/plugins/rw-postviewstats-lite;
            ./vendor/bin/codecept build;
            ./vendor/bin/codecept run Integration --steps --debug
          "
      # ---------- 16. 运行 Acceptance 测试 ----------
      - name: Debug Selenium connectivity
        run: |
          docker exec wordpress-fpm curl -s http://selenium:4444/wd/hub/status | jq .

      - name: Run Acceptance Tests
        run: |
          docker exec wordpress-fpm bash -c "cd /var/www/html/wp-content/plugins/rw-postviewstats-lite && \
            TEST_SELENIUM_HOST=selenium TEST_SELENIUM_PORT=4444 ./vendor/bin/codecept run Acceptance"

